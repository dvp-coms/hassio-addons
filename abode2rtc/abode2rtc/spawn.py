#! /usr/bin/env python3

import os
import re
import subprocess
import tempfile

from requests.exceptions import ConnectionError
from jinja2 import Template

from logger import log, go2rtc_log, DEBUG
import go2rtc
from hass import HassApiClient
from abode import AbodeApiClient
from config import ConfigParser
import const


def _cam_slug(cam_name: str, cam_id: str) -> str:
    if have_hass and has_abode:
        log.debug(f"Looking for a camera in Home Assistant that matches id {cam_id}")
        for cam in hass_cameras:
            if 'device_id' in cam['attributes']:
                log.debug(f"Comparing {cam_id} to {cam['attributes']['device_id']}")
            if 'device_id' in cam['attributes'] and cam['attributes']['device_id'] == cam_id:
                entity_id = cam['entity_id'].replace('camera.', '')
                log.debug(f"Found camera in Home Assistant, go2rtc slug will be {entity_id}")
                return entity_id
    else:
        slug = cam_name.lower().replace(' ', '_')
        log.debug(f"Home Assistant API not available, go2rtc slug will default to {slug}")
        return slug


def add_slugs(cameras) -> None:
    for cam in cameras:
        cam['slug'] = _cam_slug(cam['name'], cam['id'])


def write_go2rtc_config(cameras) -> str:
    add_slugs(cameras)
    my_dir = os.path.dirname(__file__)
    template_path = os.path.join(my_dir, 'go2rtc.yaml.j2')
    template = Template(open(template_path).read())
    yaml_path = os.path.join(tempfile.gettempdir(), 'go2rtc.yaml')
    stream_path = os.path.join(my_dir, "stream.py")
    with open(yaml_path, 'w') as f:
        log.info(f"Writing go2rtc configuration to {yaml_path}")
        f.write(template.render(
            cameras=cameras, ports=ports, abode_conf=abode_conf, stream_path=stream_path
        ))
    return yaml_path


def run_go2rtc(bin_path, config_path):
    log.info("Starting go2rtc...")
    p = subprocess.Popen([bin_path, '-config', config_path], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    while not p.poll():
        buf = ""
        for line in p.stdout:
            line: str = line.decode('utf-8').strip()
            if not line:
                continue
            line = ansi_escape.sub('', line)
            if line[0].isdigit() and buf:
                try:
                    _, severity, message = buf.split(' ', maxsplit=2)
                    if severity == 'ERR':
                        go2rtc_log.error(message)
                    elif severity == 'WRN':
                        go2rtc_log.warning(message)
                    elif severity == 'INF':
                        go2rtc_log.info(message)
                    elif severity == 'DBG' or severity == 'TRC':
                        go2rtc_log.debug(message)
                    else:
                        go2rtc_log.info(buf)
                except ValueError:
                    go2rtc_log.info(buf)
                buf = ""
            buf += line
    if p.returncode:
        log.warning(f"Exit code from go2rtc is {p.returncode}")
    else:
        log.info("go2rtc exited normally")


config = ConfigParser()
if config.debug:
    log.setLevel(DEBUG)
    go2rtc_log.setLevel(DEBUG)


abode = AbodeApiClient(username=config.abode_username, password=config.abode_password, locale=config.locale)
abode_conf = abode.save()

have_hass = False
has_abode = False
ports = const.DEFAULT_PORTS.copy()
ports.update({'api': config.port})
hass_cameras = list()
hass = HassApiClient(token=config.supervisor_token, supervisor_url=config.supervisor_url)
try:
    ports = hass.get_addon_ports()
    has_abode = hass.has_abode_integration()
    if has_abode:
        log.info("Home Assistant has the Abode integration installed")
        hass_cameras = hass.get_abode_cams()
        have_hass = True
        log.info(f"Found {len(hass_cameras)} Abode cameras in Home Assistant_dvp")
    else:
        log.info("Home Assistant does not have the Abode integration installed")
except ConnectionError as exc:
    have_hass = False
    log.error("Unable to communicate with Home Assistant", exc_info=exc)
except Exception as exc:
    log.error("Unknown error trying to connect to Home Assistant", exc_info=exc)

if not (have_hass and has_abode):
    log.warning("Autogenerated camera names may not match the entities in Home Assistant")

go2rtc_conf = write_go2rtc_config(abode.cameras)
go2rtc_path = go2rtc.find_or_download()
run_go2rtc(go2rtc_path, go2rtc_conf)
